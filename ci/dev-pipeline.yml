name: Development Security Pipeline

on:
  push:
    branches: ['dev/*', 'feature/*']
  pull_request:
    branches: ['main', 'staging']

env:
  NODE_ENV: test
  DATABASE_URL: postgresql://test:test@localhost:5432/test_db
  ENCRYPTION_KEY: ${{ secrets.DEV_ENCRYPTION_KEY }}

jobs:
  security-validation:
    name: Security & Compliance
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Database setup
        run: |
          npm run prisma migrate deploy
          npm run prisma generate

      - name: Security scan
        run: |
          npm run security:audit
          npm run test:security

      - name: Compliance checks
        run: |
          npm run compliance:check
          npm run test:compliance

      - name: Performance tests
        run: npm run test:performance

      - name: Documentation validation
        run: npm run docs:validate

  quick-feedback:
    name: Developer Feedback
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Static analysis
        run: |
          npm run lint
          npm run type-check

      - name: Security patterns
        run: |
          npx ts-node scripts/security/pattern-check.ts

      - name: PHI exposure check
        run: npx ts-node scripts/security/phi-scanner.ts

      - name: Configuration validation
        run: npx ts-node scripts/security/config-validator.ts

  performance-monitoring:
    name: Performance Checks
    runs-on: ubuntu-latest
    needs: [security-validation]

    steps:
      - name: Load test critical paths
        run: |
          npm run test:load -- --scope=critical

      - name: Check encryption performance
        run: npm run test:encryption-perf

      - name: Database query analysis
        run: npm run analyze:queries

      - name: Generate performance report
        run: npm run report:performance

      - name: Save performance data
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: reports/performance
